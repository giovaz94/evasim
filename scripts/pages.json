[{"name":"abstract fun addBlob(blob: Blob)","description":"io.github.evasim.model.World.addBlob","location":"evasim/io.github.evasim.model/-world/add-blob.html","searchKeys":["addBlob","abstract fun addBlob(blob: Blob)","io.github.evasim.model.World.addBlob"]},{"name":"abstract fun addFood(food: Food)","description":"io.github.evasim.model.World.addFood","location":"evasim/io.github.evasim.model/-world/add-food.html","searchKeys":["addFood","abstract fun addFood(food: Food)","io.github.evasim.model.World.addFood"]},{"name":"abstract fun applyForce(force: Vector2D)","description":"io.github.evasim.model.Blob.applyForce","location":"evasim/io.github.evasim.model/-blob/apply-force.html","searchKeys":["applyForce","abstract fun applyForce(force: Vector2D)","io.github.evasim.model.Blob.applyForce"]},{"name":"abstract fun attemptCollecting(blob: Blob): Set<Blob>","description":"io.github.evasim.model.Food.attemptCollecting","location":"evasim/io.github.evasim.model/-food/attempt-collecting.html","searchKeys":["attemptCollecting","abstract fun attemptCollecting(blob: Blob): Set<Blob>","io.github.evasim.model.Food.attemptCollecting"]},{"name":"abstract fun canReproduce(): Boolean","description":"io.github.evasim.model.Blob.canReproduce","location":"evasim/io.github.evasim.model/-blob/can-reproduce.html","searchKeys":["canReproduce","abstract fun canReproduce(): Boolean","io.github.evasim.model.Blob.canReproduce"]},{"name":"abstract fun clone(id: Entity.Id = this.id, personality: Personality = this.personality, position: Position2D = this.position, shape: Shape = this.shape, velocity: Vector2D = this.velocity, defaultDirection: Direction = this.defaultDirection, sightShape: Shape = this.sight.visibilityArea.shape, health: Health = this.health, reproductionStrategy: ReproductionStrategy = this.reproductionStrategy): Blob","description":"io.github.evasim.model.Blob.clone","location":"evasim/io.github.evasim.model/-blob/clone.html","searchKeys":["clone","abstract fun clone(id: Entity.Id = this.id, personality: Personality = this.personality, position: Position2D = this.position, shape: Shape = this.shape, velocity: Vector2D = this.velocity, defaultDirection: Direction = this.defaultDirection, sightShape: Shape = this.sight.visibilityArea.shape, health: Health = this.health, reproductionStrategy: ReproductionStrategy = this.reproductionStrategy): Blob","io.github.evasim.model.Blob.clone"]},{"name":"abstract fun collectedBy(): Blob?","description":"io.github.evasim.model.Food.Piece.collectedBy","location":"evasim/io.github.evasim.model/-food/-piece/collected-by.html","searchKeys":["collectedBy","abstract fun collectedBy(): Blob?","io.github.evasim.model.Food.Piece.collectedBy"]},{"name":"abstract fun findBlob(id: Entity.Id): Blob?","description":"io.github.evasim.model.World.findBlob","location":"evasim/io.github.evasim.model/-world/find-blob.html","searchKeys":["findBlob","abstract fun findBlob(id: Entity.Id): Blob?","io.github.evasim.model.World.findBlob"]},{"name":"abstract fun findBlob(id: String): Blob?","description":"io.github.evasim.model.World.findBlob","location":"evasim/io.github.evasim.model/-world/find-blob.html","searchKeys":["findBlob","abstract fun findBlob(id: String): Blob?","io.github.evasim.model.World.findBlob"]},{"name":"abstract fun findFood(id: Entity.Id): Food?","description":"io.github.evasim.model.World.findFood","location":"evasim/io.github.evasim.model/-world/find-food.html","searchKeys":["findFood","abstract fun findFood(id: Entity.Id): Food?","io.github.evasim.model.World.findFood"]},{"name":"abstract fun findFood(id: String): Food?","description":"io.github.evasim.model.World.findFood","location":"evasim/io.github.evasim.model/-world/find-food.html","searchKeys":["findFood","abstract fun findFood(id: String): Food?","io.github.evasim.model.World.findFood"]},{"name":"abstract fun forceEnd()","description":"io.github.evasim.model.Round.forceEnd","location":"evasim/io.github.evasim.model/-round/force-end.html","searchKeys":["forceEnd","abstract fun forceEnd()","io.github.evasim.model.Round.forceEnd"]},{"name":"abstract fun invertedWithRandomAngle(minDegrees: Double, maxDegrees: Double): Vector2D","description":"io.github.evasim.model.Vector2D.invertedWithRandomAngle","location":"evasim/io.github.evasim.model/-vector2-d/inverted-with-random-angle.html","searchKeys":["invertedWithRandomAngle","abstract fun invertedWithRandomAngle(minDegrees: Double, maxDegrees: Double): Vector2D","io.github.evasim.model.Vector2D.invertedWithRandomAngle"]},{"name":"abstract fun isAlive(): Boolean","description":"io.github.evasim.model.Blob.isAlive","location":"evasim/io.github.evasim.model/-blob/is-alive.html","searchKeys":["isAlive","abstract fun isAlive(): Boolean","io.github.evasim.model.Blob.isAlive"]},{"name":"abstract fun isDead(): Boolean","description":"io.github.evasim.model.Blob.isDead","location":"evasim/io.github.evasim.model/-blob/is-dead.html","searchKeys":["isDead","abstract fun isDead(): Boolean","io.github.evasim.model.Blob.isDead"]},{"name":"abstract fun isEnded(): Boolean","description":"io.github.evasim.model.Round.isEnded","location":"evasim/io.github.evasim.model/-round/is-ended.html","searchKeys":["isEnded","abstract fun isEnded(): Boolean","io.github.evasim.model.Round.isEnded"]},{"name":"abstract fun isZero(): Boolean","description":"io.github.evasim.model.Vector2D.isZero","location":"evasim/io.github.evasim.model/-vector2-d/is-zero.html","searchKeys":["isZero","abstract fun isZero(): Boolean","io.github.evasim.model.Vector2D.isZero"]},{"name":"abstract fun launch()","description":"io.github.evasim.controller.Boundary.launch","location":"evasim/io.github.evasim.controller/-boundary/launch.html","searchKeys":["launch","abstract fun launch()","io.github.evasim.controller.Boundary.launch"]},{"name":"abstract fun locallyContains(p2D: Position2D, direction: Direction? = null): Boolean","description":"io.github.evasim.model.Shape.locallyContains","location":"evasim/io.github.evasim.model/-shape/locally-contains.html","searchKeys":["locallyContains","abstract fun locallyContains(p2D: Position2D, direction: Direction? = null): Boolean","io.github.evasim.model.Shape.locallyContains"]},{"name":"abstract fun magnitude(): Double","description":"io.github.evasim.model.Vector2D.magnitude","location":"evasim/io.github.evasim.model/-vector2-d/magnitude.html","searchKeys":["magnitude","abstract fun magnitude(): Double","io.github.evasim.model.Vector2D.magnitude"]},{"name":"abstract fun next(): Round","description":"io.github.evasim.model.Round.next","location":"evasim/io.github.evasim.model/-round/next.html","searchKeys":["next","abstract fun next(): Round","io.github.evasim.model.Round.next"]},{"name":"abstract fun normalized(): Versor2D?","description":"io.github.evasim.model.Vector2D.normalized","location":"evasim/io.github.evasim.model/-vector2-d/normalized.html","searchKeys":["normalized","abstract fun normalized(): Versor2D?","io.github.evasim.model.Vector2D.normalized"]},{"name":"abstract fun post(event: Event)","description":"io.github.evasim.model.EventPublisher.post","location":"evasim/io.github.evasim.model/-event-publisher/post.html","searchKeys":["post","abstract fun post(event: Event)","io.github.evasim.model.EventPublisher.post"]},{"name":"abstract fun register(subscriber: EventSubscriber): Boolean","description":"io.github.evasim.model.EventPublisher.register","location":"evasim/io.github.evasim.model/-event-publisher/register.html","searchKeys":["register","abstract fun register(subscriber: EventSubscriber): Boolean","io.github.evasim.model.EventPublisher.register"]},{"name":"abstract fun removeFood(food: Food)","description":"io.github.evasim.model.World.removeFood","location":"evasim/io.github.evasim.model/-world/remove-food.html","searchKeys":["removeFood","abstract fun removeFood(food: Food)","io.github.evasim.model.World.removeFood"]},{"name":"abstract fun render(element: T): R","description":"io.github.evasim.view.Renderable.render","location":"evasim/io.github.evasim.view/-renderable/render.html","searchKeys":["render","abstract fun render(element: T): R","io.github.evasim.view.Renderable.render"]},{"name":"abstract fun render(element: T, context: C): R","description":"io.github.evasim.view.RenderableWithContext.render","location":"evasim/io.github.evasim.view/-renderable-with-context/render.html","searchKeys":["render","abstract fun render(element: T, context: C): R","io.github.evasim.view.RenderableWithContext.render"]},{"name":"abstract fun scale(factor: Double): Shape","description":"io.github.evasim.model.Shape.scale","location":"evasim/io.github.evasim.model/-shape/scale.html","searchKeys":["scale","abstract fun scale(factor: Double): Shape","io.github.evasim.model.Shape.scale"]},{"name":"abstract fun start(worldConfiguration: World.Companion.Configuration, roundTimeout: Duration = Duration.INFINITE, runSeed: Long = System.currentTimeMillis())","description":"io.github.evasim.controller.Controller.start","location":"evasim/io.github.evasim.controller/-controller/start.html","searchKeys":["start","abstract fun start(worldConfiguration: World.Companion.Configuration, roundTimeout: Duration = Duration.INFINITE, runSeed: Long = System.currentTimeMillis())","io.github.evasim.controller.Controller.start"]},{"name":"abstract fun stop()","description":"io.github.evasim.controller.Controller.stop","location":"evasim/io.github.evasim.controller/-controller/stop.html","searchKeys":["stop","abstract fun stop()","io.github.evasim.controller.Controller.stop"]},{"name":"abstract fun unregister(subscriber: EventSubscriber): Boolean","description":"io.github.evasim.model.EventPublisher.unregister","location":"evasim/io.github.evasim.model/-event-publisher/unregister.html","searchKeys":["unregister","abstract fun unregister(subscriber: EventSubscriber): Boolean","io.github.evasim.model.EventPublisher.unregister"]},{"name":"abstract fun update(elapsedTime: Duration = 50.milliseconds)","description":"io.github.evasim.model.Blob.update","location":"evasim/io.github.evasim.model/-blob/update.html","searchKeys":["update","abstract fun update(elapsedTime: Duration = 50.milliseconds)","io.github.evasim.model.Blob.update"]},{"name":"abstract fun update(position: Position2D, direction: Direction)","description":"io.github.evasim.model.Sight.update","location":"evasim/io.github.evasim.model/-sight/update.html","searchKeys":["update","abstract fun update(position: Position2D, direction: Direction)","io.github.evasim.model.Sight.update"]},{"name":"abstract fun updateVelocity(newVelocity: Vector2D)","description":"io.github.evasim.model.Blob.updateVelocity","location":"evasim/io.github.evasim.model/-blob/update-velocity.html","searchKeys":["updateVelocity","abstract fun updateVelocity(newVelocity: Vector2D)","io.github.evasim.model.Blob.updateVelocity"]},{"name":"abstract infix fun dot(v2D: Vector2D): Double","description":"io.github.evasim.model.Vector2D.dot","location":"evasim/io.github.evasim.model/-vector2-d/dot.html","searchKeys":["dot","abstract infix fun dot(v2D: Vector2D): Double","io.github.evasim.model.Vector2D.dot"]},{"name":"abstract operator fun contains(entity: Entity): Boolean","description":"io.github.evasim.model.Sight.contains","location":"evasim/io.github.evasim.model/-sight/contains.html","searchKeys":["contains","abstract operator fun contains(entity: Entity): Boolean","io.github.evasim.model.Sight.contains"]},{"name":"abstract operator fun div(scalar: Double): Vector2D","description":"io.github.evasim.model.Vector2D.div","location":"evasim/io.github.evasim.model/-vector2-d/div.html","searchKeys":["div","abstract operator fun div(scalar: Double): Vector2D","io.github.evasim.model.Vector2D.div"]},{"name":"abstract operator fun minus(health: Energy)","description":"io.github.evasim.model.Health.minus","location":"evasim/io.github.evasim.model/-health/minus.html","searchKeys":["minus","abstract operator fun minus(health: Energy)","io.github.evasim.model.Health.minus"]},{"name":"abstract operator fun minus(p2D: Position2D): Position2D","description":"io.github.evasim.model.Position2D.minus","location":"evasim/io.github.evasim.model/-position2-d/minus.html","searchKeys":["minus","abstract operator fun minus(p2D: Position2D): Position2D","io.github.evasim.model.Position2D.minus"]},{"name":"abstract operator fun minus(v2D: Vector2D): Position2D","description":"io.github.evasim.model.Position2D.minus","location":"evasim/io.github.evasim.model/-position2-d/minus.html","searchKeys":["minus","abstract operator fun minus(v2D: Vector2D): Position2D","io.github.evasim.model.Position2D.minus"]},{"name":"abstract operator fun minus(v2D: Vector2D): Vector2D","description":"io.github.evasim.model.Vector2D.minus","location":"evasim/io.github.evasim.model/-vector2-d/minus.html","searchKeys":["minus","abstract operator fun minus(v2D: Vector2D): Vector2D","io.github.evasim.model.Vector2D.minus"]},{"name":"abstract operator fun plus(health: Energy)","description":"io.github.evasim.model.Health.plus","location":"evasim/io.github.evasim.model/-health/plus.html","searchKeys":["plus","abstract operator fun plus(health: Energy)","io.github.evasim.model.Health.plus"]},{"name":"abstract operator fun plus(p2D: Position2D): Position2D","description":"io.github.evasim.model.Position2D.plus","location":"evasim/io.github.evasim.model/-position2-d/plus.html","searchKeys":["plus","abstract operator fun plus(p2D: Position2D): Position2D","io.github.evasim.model.Position2D.plus"]},{"name":"abstract operator fun plus(v2D: Vector2D): Position2D","description":"io.github.evasim.model.Position2D.plus","location":"evasim/io.github.evasim.model/-position2-d/plus.html","searchKeys":["plus","abstract operator fun plus(v2D: Vector2D): Position2D","io.github.evasim.model.Position2D.plus"]},{"name":"abstract operator fun plus(v2D: Vector2D): Vector2D","description":"io.github.evasim.model.Vector2D.plus","location":"evasim/io.github.evasim.model/-vector2-d/plus.html","searchKeys":["plus","abstract operator fun plus(v2D: Vector2D): Vector2D","io.github.evasim.model.Vector2D.plus"]},{"name":"abstract operator fun times(scalar: Double): Vector2D","description":"io.github.evasim.model.Vector2D.times","location":"evasim/io.github.evasim.model/-vector2-d/times.html","searchKeys":["times","abstract operator fun times(scalar: Double): Vector2D","io.github.evasim.model.Vector2D.times"]},{"name":"abstract operator fun unaryMinus(): Vector2D","description":"io.github.evasim.model.Vector2D.unaryMinus","location":"evasim/io.github.evasim.model/-vector2-d/unary-minus.html","searchKeys":["unaryMinus","abstract operator fun unaryMinus(): Vector2D","io.github.evasim.model.Vector2D.unaryMinus"]},{"name":"abstract val blobs: Sequence<Blob>","description":"io.github.evasim.model.World.blobs","location":"evasim/io.github.evasim.model/-world/blobs.html","searchKeys":["blobs","abstract val blobs: Sequence<Blob>","io.github.evasim.model.World.blobs"]},{"name":"abstract val current: Energy","description":"io.github.evasim.model.Health.current","location":"evasim/io.github.evasim.model/-health/current.html","searchKeys":["current","abstract val current: Energy","io.github.evasim.model.Health.current"]},{"name":"abstract val defaultDirection: Direction","description":"io.github.evasim.model.Blob.defaultDirection","location":"evasim/io.github.evasim.model/-blob/default-direction.html","searchKeys":["defaultDirection","abstract val defaultDirection: Direction","io.github.evasim.model.Blob.defaultDirection"]},{"name":"abstract val elapsedTime: Duration","description":"io.github.evasim.model.Round.elapsedTime","location":"evasim/io.github.evasim.model/-round/elapsed-time.html","searchKeys":["elapsedTime","abstract val elapsedTime: Duration","io.github.evasim.model.Round.elapsedTime"]},{"name":"abstract val energy: Energy","description":"io.github.evasim.model.Food.Piece.energy","location":"evasim/io.github.evasim.model/-food/-piece/energy.html","searchKeys":["energy","abstract val energy: Energy","io.github.evasim.model.Food.Piece.energy"]},{"name":"abstract val foods: Sequence<Food>","description":"io.github.evasim.model.World.foods","location":"evasim/io.github.evasim.model/-world/foods.html","searchKeys":["foods","abstract val foods: Sequence<Food>","io.github.evasim.model.World.foods"]},{"name":"abstract val health: Health","description":"io.github.evasim.model.Blob.health","location":"evasim/io.github.evasim.model/-blob/health.html","searchKeys":["health","abstract val health: Health","io.github.evasim.model.Blob.health"]},{"name":"abstract val id: Entity.Id","description":"io.github.evasim.model.Entity.id","location":"evasim/io.github.evasim.model/-entity/id.html","searchKeys":["id","abstract val id: Entity.Id","io.github.evasim.model.Entity.id"]},{"name":"abstract val initialFoods: Int","description":"io.github.evasim.model.World.initialFoods","location":"evasim/io.github.evasim.model/-world/initial-foods.html","searchKeys":["initialFoods","abstract val initialFoods: Int","io.github.evasim.model.World.initialFoods"]},{"name":"abstract val initialPlace: Placed<Shape>","description":"io.github.evasim.model.Blob.initialPlace","location":"evasim/io.github.evasim.model/-blob/initial-place.html","searchKeys":["initialPlace","abstract val initialPlace: Placed<Shape>","io.github.evasim.model.Blob.initialPlace"]},{"name":"abstract val max: Energy","description":"io.github.evasim.model.Health.max","location":"evasim/io.github.evasim.model/-health/max.html","searchKeys":["max","abstract val max: Energy","io.github.evasim.model.Health.max"]},{"name":"abstract val min: Energy","description":"io.github.evasim.model.Health.min","location":"evasim/io.github.evasim.model/-health/min.html","searchKeys":["min","abstract val min: Energy","io.github.evasim.model.Health.min"]},{"name":"abstract val number: Int","description":"io.github.evasim.model.Round.number","location":"evasim/io.github.evasim.model/-round/number.html","searchKeys":["number","abstract val number: Int","io.github.evasim.model.Round.number"]},{"name":"abstract val personality: Personality","description":"io.github.evasim.model.Blob.personality","location":"evasim/io.github.evasim.model/-blob/personality.html","searchKeys":["personality","abstract val personality: Personality","io.github.evasim.model.Blob.personality"]},{"name":"abstract val pieces: Set<Food.Piece>","description":"io.github.evasim.model.Food.pieces","location":"evasim/io.github.evasim.model/-food/pieces.html","searchKeys":["pieces","abstract val pieces: Set<Food.Piece>","io.github.evasim.model.Food.pieces"]},{"name":"abstract val position: Position2D","description":"io.github.evasim.model.Entity.position","location":"evasim/io.github.evasim.model/-entity/position.html","searchKeys":["position","abstract val position: Position2D","io.github.evasim.model.Entity.position"]},{"name":"abstract val position: Position2D","description":"io.github.evasim.model.SpawnZone.position","location":"evasim/io.github.evasim.model/-spawn-zone/position.html","searchKeys":["position","abstract val position: Position2D","io.github.evasim.model.SpawnZone.position"]},{"name":"abstract val reproductionStrategy: ReproductionStrategy","description":"io.github.evasim.model.Blob.reproductionStrategy","location":"evasim/io.github.evasim.model/-blob/reproduction-strategy.html","searchKeys":["reproductionStrategy","abstract val reproductionStrategy: ReproductionStrategy","io.github.evasim.model.Blob.reproductionStrategy"]},{"name":"abstract val shape: Shape","description":"io.github.evasim.model.Entity.shape","location":"evasim/io.github.evasim.model/-entity/shape.html","searchKeys":["shape","abstract val shape: Shape","io.github.evasim.model.Entity.shape"]},{"name":"abstract val shape: Shape","description":"io.github.evasim.model.SpawnZone.shape","location":"evasim/io.github.evasim.model/-spawn-zone/shape.html","searchKeys":["shape","abstract val shape: Shape","io.github.evasim.model.SpawnZone.shape"]},{"name":"abstract val shape: Shape","description":"io.github.evasim.model.World.shape","location":"evasim/io.github.evasim.model/-world/shape.html","searchKeys":["shape","abstract val shape: Shape","io.github.evasim.model.World.shape"]},{"name":"abstract val sight: Sight","description":"io.github.evasim.model.Blob.sight","location":"evasim/io.github.evasim.model/-blob/sight.html","searchKeys":["sight","abstract val sight: Sight","io.github.evasim.model.Blob.sight"]},{"name":"abstract val spawnZones: Sequence<SpawnZone>","description":"io.github.evasim.model.World.spawnZones","location":"evasim/io.github.evasim.model/-world/spawn-zones.html","searchKeys":["spawnZones","abstract val spawnZones: Sequence<SpawnZone>","io.github.evasim.model.World.spawnZones"]},{"name":"abstract val totalEnergy: Energy","description":"io.github.evasim.model.Food.totalEnergy","location":"evasim/io.github.evasim.model/-food/total-energy.html","searchKeys":["totalEnergy","abstract val totalEnergy: Energy","io.github.evasim.model.Food.totalEnergy"]},{"name":"abstract val velocity: Vector2D","description":"io.github.evasim.model.Blob.velocity","location":"evasim/io.github.evasim.model/-blob/velocity.html","searchKeys":["velocity","abstract val velocity: Vector2D","io.github.evasim.model.Blob.velocity"]},{"name":"abstract val visibilityArea: Placed<Shape>","description":"io.github.evasim.model.Sight.visibilityArea","location":"evasim/io.github.evasim.model/-sight/visibility-area.html","searchKeys":["visibilityArea","abstract val visibilityArea: Placed<Shape>","io.github.evasim.model.Sight.visibilityArea"]},{"name":"abstract val world: World","description":"io.github.evasim.model.Round.world","location":"evasim/io.github.evasim.model/-round/world.html","searchKeys":["world","abstract val world: World","io.github.evasim.model.Round.world"]},{"name":"abstract val x: Double","description":"io.github.evasim.model.Position2D.x","location":"evasim/io.github.evasim.model/-position2-d/x.html","searchKeys":["x","abstract val x: Double","io.github.evasim.model.Position2D.x"]},{"name":"abstract val x: Double","description":"io.github.evasim.model.Vector2D.x","location":"evasim/io.github.evasim.model/-vector2-d/x.html","searchKeys":["x","abstract val x: Double","io.github.evasim.model.Vector2D.x"]},{"name":"abstract val y: Double","description":"io.github.evasim.model.Position2D.y","location":"evasim/io.github.evasim.model/-position2-d/y.html","searchKeys":["y","abstract val y: Double","io.github.evasim.model.Position2D.y"]},{"name":"abstract val y: Double","description":"io.github.evasim.model.Vector2D.y","location":"evasim/io.github.evasim.model/-vector2-d/y.html","searchKeys":["y","abstract val y: Double","io.github.evasim.model.Vector2D.y"]},{"name":"class FXSimulatorView : Application, Boundary","description":"io.github.evasim.view.FXSimulatorView","location":"evasim/io.github.evasim.view/-f-x-simulator-view/index.html","searchKeys":["FXSimulatorView","class FXSimulatorView : Application, Boundary","io.github.evasim.view.FXSimulatorView"]},{"name":"class RandomConfig","description":"io.github.evasim.utils.RandomConfig","location":"evasim/io.github.evasim.utils/-random-config/index.html","searchKeys":["RandomConfig","class RandomConfig","io.github.evasim.utils.RandomConfig"]},{"name":"class RoundLogger(logFile: File = File(\"rounds.log\"), logContentFunction: (Round) -> String)","description":"io.github.evasim.utils.RoundLogger","location":"evasim/io.github.evasim.utils/-round-logger/index.html","searchKeys":["RoundLogger","class RoundLogger(logFile: File = File(\"rounds.log\"), logContentFunction: (Round) -> String)","io.github.evasim.utils.RoundLogger"]},{"name":"class SimulationEnvironment(round: Round, agentIDs: Map<String, AgentID> = emptyMap(), externalActions: Map<String, ExternalAction> = mapOf(\n        update to Update,\n        collect to CollectFood,\n        check_contention to CheckContention,\n        solve_contention to SolveContention,\n    ), messageBoxes: Map<AgentID, MessageQueue> = emptyMap(), perception: Perception = Perception.empty(), data: Map<String, Any> = mapOf(\"collectedFood\" to mutableMapOf<Blob, Pair<Food, Contenders>>())) : EnvironmentImpl","description":"io.github.evasim.agents.SimulationEnvironment","location":"evasim/io.github.evasim.agents/-simulation-environment/index.html","searchKeys":["SimulationEnvironment","class SimulationEnvironment(round: Round, agentIDs: Map<String, AgentID> = emptyMap(), externalActions: Map<String, ExternalAction> = mapOf(\n        update to Update,\n        collect to CollectFood,\n        check_contention to CheckContention,\n        solve_contention to SolveContention,\n    ), messageBoxes: Map<AgentID, MessageQueue> = emptyMap(), perception: Perception = Perception.empty(), data: Map<String, Any> = mapOf(\"collectedFood\" to mutableMapOf<Blob, Pair<Food, Contenders>>())) : EnvironmentImpl","io.github.evasim.agents.SimulationEnvironment"]},{"name":"constructor()","description":"io.github.evasim.model.EventBusPublisher.EventBusPublisher","location":"evasim/io.github.evasim.model/-event-bus-publisher/-event-bus-publisher.html","searchKeys":["EventBusPublisher","constructor()","io.github.evasim.model.EventBusPublisher.EventBusPublisher"]},{"name":"constructor()","description":"io.github.evasim.view.FXSimulatorView.FXSimulatorView","location":"evasim/io.github.evasim.view/-f-x-simulator-view/-f-x-simulator-view.html","searchKeys":["FXSimulatorView","constructor()","io.github.evasim.view.FXSimulatorView.FXSimulatorView"]},{"name":"constructor(blob: Blob)","description":"io.github.evasim.model.UpdatedBlob.UpdatedBlob","location":"evasim/io.github.evasim.model/-updated-blob/-updated-blob.html","searchKeys":["UpdatedBlob","constructor(blob: Blob)","io.github.evasim.model.UpdatedBlob.UpdatedBlob"]},{"name":"constructor(food: Food)","description":"io.github.evasim.model.RemoveFood.RemoveFood","location":"evasim/io.github.evasim.model/-remove-food/-remove-food.html","searchKeys":["RemoveFood","constructor(food: Food)","io.github.evasim.model.RemoveFood.RemoveFood"]},{"name":"constructor(food: Food)","description":"io.github.evasim.model.UpdatedFood.UpdatedFood","location":"evasim/io.github.evasim.model/-updated-food/-updated-food.html","searchKeys":["UpdatedFood","constructor(food: Food)","io.github.evasim.model.UpdatedFood.UpdatedFood"]},{"name":"constructor(innerRadius: Double, outerRadius: Double)","description":"io.github.evasim.model.HollowCircle.HollowCircle","location":"evasim/io.github.evasim.model/-hollow-circle/-hollow-circle.html","searchKeys":["HollowCircle","constructor(innerRadius: Double, outerRadius: Double)","io.github.evasim.model.HollowCircle.HollowCircle"]},{"name":"constructor(logFile: File = File(\"rounds.log\"), logContentFunction: (Round) -> String)","description":"io.github.evasim.utils.RoundLogger.RoundLogger","location":"evasim/io.github.evasim.utils/-round-logger/-round-logger.html","searchKeys":["RoundLogger","constructor(logFile: File = File(\"rounds.log\"), logContentFunction: (Round) -> String)","io.github.evasim.utils.RoundLogger.RoundLogger"]},{"name":"constructor(radius: Double)","description":"io.github.evasim.model.Circle.Circle","location":"evasim/io.github.evasim.model/-circle/-circle.html","searchKeys":["Circle","constructor(radius: Double)","io.github.evasim.model.Circle.Circle"]},{"name":"constructor(radius: Double, fovDegrees: Degrees)","description":"io.github.evasim.model.Cone.Cone","location":"evasim/io.github.evasim.model/-cone/-cone.html","searchKeys":["Cone","constructor(radius: Double, fovDegrees: Degrees)","io.github.evasim.model.Cone.Cone"]},{"name":"constructor(round: Round, agentIDs: Map<String, AgentID> = emptyMap(), externalActions: Map<String, ExternalAction> = mapOf(\n        update to Update,\n        collect to CollectFood,\n        check_contention to CheckContention,\n        solve_contention to SolveContention,\n    ), messageBoxes: Map<AgentID, MessageQueue> = emptyMap(), perception: Perception = Perception.empty(), data: Map<String, Any> = mapOf(\"collectedFood\" to mutableMapOf<Blob, Pair<Food, Contenders>>()))","description":"io.github.evasim.agents.SimulationEnvironment.SimulationEnvironment","location":"evasim/io.github.evasim.agents/-simulation-environment/-simulation-environment.html","searchKeys":["SimulationEnvironment","constructor(round: Round, agentIDs: Map<String, AgentID> = emptyMap(), externalActions: Map<String, ExternalAction> = mapOf(\n        update to Update,\n        collect to CollectFood,\n        check_contention to CheckContention,\n        solve_contention to SolveContention,\n    ), messageBoxes: Map<AgentID, MessageQueue> = emptyMap(), perception: Perception = Perception.empty(), data: Map<String, Any> = mapOf(\"collectedFood\" to mutableMapOf<Blob, Pair<Food, Contenders>>()))","io.github.evasim.agents.SimulationEnvironment.SimulationEnvironment"]},{"name":"constructor(shape: S, position: Position2D, direction: Direction? = null)","description":"io.github.evasim.model.Placed.Placed","location":"evasim/io.github.evasim.model/-placed/-placed.html","searchKeys":["Placed","constructor(shape: S, position: Position2D, direction: Direction? = null)","io.github.evasim.model.Placed.Placed"]},{"name":"constructor(shape: Shape, spawnZones: Set<SpawnZone>, hawkyBlobs: Int, doveBlobs: Int, foodsAmount: Int = (hawkyBlobs + doveBlobs) / 2)","description":"io.github.evasim.model.World.Companion.Configuration.Configuration","location":"evasim/io.github.evasim.model/-world/-companion/-configuration/-configuration.html","searchKeys":["Configuration","constructor(shape: Shape, spawnZones: Set<SpawnZone>, hawkyBlobs: Int, doveBlobs: Int, foodsAmount: Int = (hawkyBlobs + doveBlobs) / 2)","io.github.evasim.model.World.Companion.Configuration.Configuration"]},{"name":"constructor(value: Double)","description":"io.github.evasim.model.Degrees.Degrees","location":"evasim/io.github.evasim.model/-degrees/-degrees.html","searchKeys":["Degrees","constructor(value: Double)","io.github.evasim.model.Degrees.Degrees"]},{"name":"constructor(value: Double)","description":"io.github.evasim.model.Radians.Radians","location":"evasim/io.github.evasim.model/-radians/-radians.html","searchKeys":["Radians","constructor(value: Double)","io.github.evasim.model.Radians.Radians"]},{"name":"constructor(value: String)","description":"io.github.evasim.model.Entity.Id.Id","location":"evasim/io.github.evasim.model/-entity/-id/-id.html","searchKeys":["Id","constructor(value: String)","io.github.evasim.model.Entity.Id.Id"]},{"name":"constructor(width: Double, height: Double)","description":"io.github.evasim.model.Rectangle.Rectangle","location":"evasim/io.github.evasim.model/-rectangle/-rectangle.html","searchKeys":["Rectangle","constructor(width: Double, height: Double)","io.github.evasim.model.Rectangle.Rectangle"]},{"name":"constructor(world: World)","description":"io.github.evasim.model.UpdatedWorld.UpdatedWorld","location":"evasim/io.github.evasim.model/-updated-world/-updated-world.html","searchKeys":["UpdatedWorld","constructor(world: World)","io.github.evasim.model.UpdatedWorld.UpdatedWorld"]},{"name":"data class Circle(val radius: Double) : Shape","description":"io.github.evasim.model.Circle","location":"evasim/io.github.evasim.model/-circle/index.html","searchKeys":["Circle","data class Circle(val radius: Double) : Shape","io.github.evasim.model.Circle"]},{"name":"data class Cone(val radius: Double, val fovDegrees: Degrees) : Shape","description":"io.github.evasim.model.Cone","location":"evasim/io.github.evasim.model/-cone/index.html","searchKeys":["Cone","data class Cone(val radius: Double, val fovDegrees: Degrees) : Shape","io.github.evasim.model.Cone"]},{"name":"data class Configuration(val shape: Shape, val spawnZones: Set<SpawnZone>, val hawkyBlobs: Int, val doveBlobs: Int, val foodsAmount: Int = (hawkyBlobs + doveBlobs) / 2)","description":"io.github.evasim.model.World.Companion.Configuration","location":"evasim/io.github.evasim.model/-world/-companion/-configuration/index.html","searchKeys":["Configuration","data class Configuration(val shape: Shape, val spawnZones: Set<SpawnZone>, val hawkyBlobs: Int, val doveBlobs: Int, val foodsAmount: Int = (hawkyBlobs + doveBlobs) / 2)","io.github.evasim.model.World.Companion.Configuration"]},{"name":"data class HollowCircle(val innerRadius: Double, val outerRadius: Double) : Shape","description":"io.github.evasim.model.HollowCircle","location":"evasim/io.github.evasim.model/-hollow-circle/index.html","searchKeys":["HollowCircle","data class HollowCircle(val innerRadius: Double, val outerRadius: Double) : Shape","io.github.evasim.model.HollowCircle"]},{"name":"data class Placed<S : Shape>(val shape: S, var position: Position2D, var direction: Direction? = null)","description":"io.github.evasim.model.Placed","location":"evasim/io.github.evasim.model/-placed/index.html","searchKeys":["Placed","data class Placed<S : Shape>(val shape: S, var position: Position2D, var direction: Direction? = null)","io.github.evasim.model.Placed"]},{"name":"data class Rectangle(val width: Double, val height: Double) : Shape","description":"io.github.evasim.model.Rectangle","location":"evasim/io.github.evasim.model/-rectangle/index.html","searchKeys":["Rectangle","data class Rectangle(val width: Double, val height: Double) : Shape","io.github.evasim.model.Rectangle"]},{"name":"data class RemoveFood(val food: Food) : Event","description":"io.github.evasim.model.RemoveFood","location":"evasim/io.github.evasim.model/-remove-food/index.html","searchKeys":["RemoveFood","data class RemoveFood(val food: Food) : Event","io.github.evasim.model.RemoveFood"]},{"name":"data class UpdatedBlob(val blob: Blob) : Event","description":"io.github.evasim.model.UpdatedBlob","location":"evasim/io.github.evasim.model/-updated-blob/index.html","searchKeys":["UpdatedBlob","data class UpdatedBlob(val blob: Blob) : Event","io.github.evasim.model.UpdatedBlob"]},{"name":"data class UpdatedFood(val food: Food) : Event","description":"io.github.evasim.model.UpdatedFood","location":"evasim/io.github.evasim.model/-updated-food/index.html","searchKeys":["UpdatedFood","data class UpdatedFood(val food: Food) : Event","io.github.evasim.model.UpdatedFood"]},{"name":"data class UpdatedWorld(val world: World) : Event","description":"io.github.evasim.model.UpdatedWorld","location":"evasim/io.github.evasim.model/-updated-world/index.html","searchKeys":["UpdatedWorld","data class UpdatedWorld(val world: World) : Event","io.github.evasim.model.UpdatedWorld"]},{"name":"data object Dove : Personality","description":"io.github.evasim.model.Dove","location":"evasim/io.github.evasim.model/-dove/index.html","searchKeys":["Dove","data object Dove : Personality","io.github.evasim.model.Dove"]},{"name":"data object Hawk : Personality","description":"io.github.evasim.model.Hawk","location":"evasim/io.github.evasim.model/-hawk/index.html","searchKeys":["Hawk","data object Hawk : Personality","io.github.evasim.model.Hawk"]},{"name":"data object SimulationEnded : Event","description":"io.github.evasim.model.SimulationEnded","location":"evasim/io.github.evasim.model/-simulation-ended/index.html","searchKeys":["SimulationEnded","data object SimulationEnded : Event","io.github.evasim.model.SimulationEnded"]},{"name":"data object SimulationStarted : Event","description":"io.github.evasim.model.SimulationStarted","location":"evasim/io.github.evasim.model/-simulation-started/index.html","searchKeys":["SimulationStarted","data object SimulationStarted : Event","io.github.evasim.model.SimulationStarted"]},{"name":"fun Entity.distanceTo(other: Entity): Double","description":"io.github.evasim.model.distanceTo","location":"evasim/io.github.evasim.model/distance-to.html","searchKeys":["distanceTo","fun Entity.distanceTo(other: Entity): Double","io.github.evasim.model.distanceTo"]},{"name":"fun MasScope.blobAgent(blob: Blob): MasScope","description":"io.github.evasim.agents.blobAgent","location":"evasim/io.github.evasim.agents/blob-agent.html","searchKeys":["blobAgent","fun MasScope.blobAgent(blob: Blob): MasScope","io.github.evasim.agents.blobAgent"]},{"name":"fun Placed<out Shape>.isFullyContainedIn(other: Shape): Boolean","description":"io.github.evasim.model.isFullyContainedIn","location":"evasim/io.github.evasim.model/is-fully-contained-in.html","searchKeys":["isFullyContainedIn","fun Placed<out Shape>.isFullyContainedIn(other: Shape): Boolean","io.github.evasim.model.isFullyContainedIn"]},{"name":"fun Position2D.asVector2D(): Vector2D","description":"io.github.evasim.model.asVector2D","location":"evasim/io.github.evasim.model/as-vector2-d.html","searchKeys":["asVector2D","fun Position2D.asVector2D(): Vector2D","io.github.evasim.model.asVector2D"]},{"name":"fun String.toPersonality(): Personality?","description":"io.github.evasim.model.toPersonality","location":"evasim/io.github.evasim.model/to-personality.html","searchKeys":["toPersonality","fun String.toPersonality(): Personality?","io.github.evasim.model.toPersonality"]},{"name":"fun Struct.asBelief(): Belief","description":"io.github.evasim.utils.Logic.asBelief","location":"evasim/io.github.evasim.utils/-logic/as-belief.html","searchKeys":["asBelief","fun Struct.asBelief(): Belief","io.github.evasim.utils.Logic.asBelief"]},{"name":"fun Term.castToDouble(): Double","description":"io.github.evasim.utils.Logic.castToDouble","location":"evasim/io.github.evasim.utils/-logic/cast-to-double.html","searchKeys":["castToDouble","fun Term.castToDouble(): Double","io.github.evasim.utils.Logic.castToDouble"]},{"name":"fun Term.castToInt(): Int","description":"io.github.evasim.utils.Logic.castToInt","location":"evasim/io.github.evasim.utils/-logic/cast-to-int.html","searchKeys":["castToInt","fun Term.castToInt(): Int","io.github.evasim.utils.Logic.castToInt"]},{"name":"fun Tuple.castToVector2D(): Vector2D","description":"io.github.evasim.utils.Logic.castToVector2D","location":"evasim/io.github.evasim.utils/-logic/cast-to-vector2-d.html","searchKeys":["castToVector2D","fun Tuple.castToVector2D(): Vector2D","io.github.evasim.utils.Logic.castToVector2D"]},{"name":"fun Vector2D.castToVector2D(): Tuple","description":"io.github.evasim.utils.Logic.castToVector2D","location":"evasim/io.github.evasim.utils/-logic/cast-to-vector2-d.html","searchKeys":["castToVector2D","fun Vector2D.castToVector2D(): Tuple","io.github.evasim.utils.Logic.castToVector2D"]},{"name":"fun byCriteria(world: World, criteria: (Round) -> Boolean): Round","description":"io.github.evasim.model.Round.Companion.byCriteria","location":"evasim/io.github.evasim.model/-round/-companion/by-criteria.html","searchKeys":["byCriteria","fun byCriteria(world: World, criteria: (Round) -> Boolean): Round","io.github.evasim.model.Round.Companion.byCriteria"]},{"name":"fun byNoFood(world: World): Round","description":"io.github.evasim.model.Round.Companion.byNoFood","location":"evasim/io.github.evasim.model/-round/-companion/by-no-food.html","searchKeys":["byNoFood","fun byNoFood(world: World): Round","io.github.evasim.model.Round.Companion.byNoFood"]},{"name":"fun bySeed(seed: Long): RandomConfig","description":"io.github.evasim.utils.RandomConfig.Companion.bySeed","location":"evasim/io.github.evasim.utils/-random-config/-companion/by-seed.html","searchKeys":["bySeed","fun bySeed(seed: Long): RandomConfig","io.github.evasim.utils.RandomConfig.Companion.bySeed"]},{"name":"fun close()","description":"io.github.evasim.utils.RoundLogger.close","location":"evasim/io.github.evasim.utils/-round-logger/close.html","searchKeys":["close","fun close()","io.github.evasim.utils.RoundLogger.close"]},{"name":"fun configure(config: RandomConfig)","description":"io.github.evasim.utils.Rnd.configure","location":"evasim/io.github.evasim.utils/-rnd/configure.html","searchKeys":["configure","fun configure(config: RandomConfig)","io.github.evasim.utils.Rnd.configure"]},{"name":"fun default(): RandomConfig","description":"io.github.evasim.utils.RandomConfig.Companion.default","location":"evasim/io.github.evasim.utils/-random-config/-companion/default.html","searchKeys":["default","fun default(): RandomConfig","io.github.evasim.utils.RandomConfig.Companion.default"]},{"name":"fun from(current: Energy, min: Energy, max: Energy): Health","description":"io.github.evasim.model.Health.Companion.from","location":"evasim/io.github.evasim.model/-health/-companion/from.html","searchKeys":["from","fun from(current: Energy, min: Energy, max: Energy): Health","io.github.evasim.model.Health.Companion.from"]},{"name":"fun from(pair: Pair<Double, Double>): Position2D","description":"io.github.evasim.model.Position2D.Companion.from","location":"evasim/io.github.evasim.model/-position2-d/-companion/from.html","searchKeys":["from","fun from(pair: Pair<Double, Double>): Position2D","io.github.evasim.model.Position2D.Companion.from"]},{"name":"fun from(pair: Pair<Double, Double>): Vector2D","description":"io.github.evasim.model.Vector2D.Companion.from","location":"evasim/io.github.evasim.model/-vector2-d/-companion/from.html","searchKeys":["from","fun from(pair: Pair<Double, Double>): Vector2D","io.github.evasim.model.Vector2D.Companion.from"]},{"name":"fun from(round: Round): World","description":"io.github.evasim.model.World.Companion.from","location":"evasim/io.github.evasim.model/-world/-companion/from.html","searchKeys":["from","fun from(round: Round): World","io.github.evasim.model.World.Companion.from"]},{"name":"fun from(vector: Vector2D): Versor2D","description":"io.github.evasim.model.Versor2D.Companion.from","location":"evasim/io.github.evasim.model/-versor2-d/-companion/from.html","searchKeys":["from","fun from(vector: Vector2D): Versor2D","io.github.evasim.model.Versor2D.Companion.from"]},{"name":"fun fromAngle(degrees: Degrees): Versor2D","description":"io.github.evasim.model.Versor2D.Companion.fromAngle","location":"evasim/io.github.evasim.model/-versor2-d/-companion/from-angle.html","searchKeys":["fromAngle","fun fromAngle(degrees: Degrees): Versor2D","io.github.evasim.model.Versor2D.Companion.fromAngle"]},{"name":"fun fromAngle(radians: Radians): Versor2D","description":"io.github.evasim.model.Versor2D.Companion.fromAngle","location":"evasim/io.github.evasim.model/-versor2-d/-companion/from-angle.html","searchKeys":["fromAngle","fun fromAngle(radians: Radians): Versor2D","io.github.evasim.model.Versor2D.Companion.fromAngle"]},{"name":"fun fromConfiguration(configuration: World.Companion.Configuration): World","description":"io.github.evasim.model.World.Companion.fromConfiguration","location":"evasim/io.github.evasim.model/-world/-companion/from-configuration.html","searchKeys":["fromConfiguration","fun fromConfiguration(configuration: World.Companion.Configuration): World","io.github.evasim.model.World.Companion.fromConfiguration"]},{"name":"fun interface ContentionRule : Function3<Personality, Personality, Energy, Pair<Energy, Energy>> ","description":"io.github.evasim.model.ContentionRule","location":"evasim/io.github.evasim.model/-contention-rule/index.html","searchKeys":["ContentionRule","fun interface ContentionRule : Function3<Personality, Personality, Energy, Pair<Energy, Energy>> ","io.github.evasim.model.ContentionRule"]},{"name":"fun interface Renderable<in T, out R> : RenderableWithContext<T, Unit, R> ","description":"io.github.evasim.view.Renderable","location":"evasim/io.github.evasim.view/-renderable/index.html","searchKeys":["Renderable","fun interface Renderable<in T, out R> : RenderableWithContext<T, Unit, R> ","io.github.evasim.view.Renderable"]},{"name":"fun interface RenderableWithContext<in T, in C, out R>","description":"io.github.evasim.view.RenderableWithContext","location":"evasim/io.github.evasim.view/-renderable-with-context/index.html","searchKeys":["RenderableWithContext","fun interface RenderableWithContext<in T, in C, out R>","io.github.evasim.view.RenderableWithContext"]},{"name":"fun interface ReproductionStrategy : Function1<Energy, State> ","description":"io.github.evasim.model.ReproductionStrategy","location":"evasim/io.github.evasim.model/-reproduction-strategy/index.html","searchKeys":["ReproductionStrategy","fun interface ReproductionStrategy : Function1<Energy, State> ","io.github.evasim.model.ReproductionStrategy"]},{"name":"fun isConfigured(): Boolean","description":"io.github.evasim.utils.Rnd.isConfigured","location":"evasim/io.github.evasim.utils/-rnd/is-configured.html","searchKeys":["isConfigured","fun isConfigured(): Boolean","io.github.evasim.utils.Rnd.isConfigured"]},{"name":"fun main(args: Array<String>)","description":"io.github.evasim.EvaSimApp.main","location":"evasim/io.github.evasim/-eva-sim-app/main.html","searchKeys":["main","fun main(args: Array<String>)","io.github.evasim.EvaSimApp.main"]},{"name":"fun nextDouble(from: Double = 0.0, until: Double = 1.0): Double","description":"io.github.evasim.utils.Rnd.nextDouble","location":"evasim/io.github.evasim.utils/-rnd/next-double.html","searchKeys":["nextDouble","fun nextDouble(from: Double = 0.0, until: Double = 1.0): Double","io.github.evasim.utils.Rnd.nextDouble"]},{"name":"fun nextInt(from: Int, until: Int): Int","description":"io.github.evasim.utils.Rnd.nextInt","location":"evasim/io.github.evasim.utils/-rnd/next-int.html","searchKeys":["nextInt","fun nextInt(from: Int, until: Int): Int","io.github.evasim.utils.Rnd.nextInt"]},{"name":"fun of(id: Entity.Id, shape: Shape, position: Position2D, pieces: Int): Food","description":"io.github.evasim.model.Food.Companion.of","location":"evasim/io.github.evasim.model/-food/-companion/of.html","searchKeys":["of","fun of(id: Entity.Id, shape: Shape, position: Position2D, pieces: Int): Food","io.github.evasim.model.Food.Companion.of"]},{"name":"fun of(shape: Shape, position: Position2D, pieces: Int): Food","description":"io.github.evasim.model.Food.Companion.of","location":"evasim/io.github.evasim.model/-food/-companion/of.html","searchKeys":["of","fun of(shape: Shape, position: Position2D, pieces: Int): Food","io.github.evasim.model.Food.Companion.of"]},{"name":"fun positionWithin(bounds: Placed<Shape>): Position2D","description":"io.github.evasim.model.positionWithin","location":"evasim/io.github.evasim.model/position-within.html","searchKeys":["positionWithin","fun positionWithin(bounds: Placed<Shape>): Position2D","io.github.evasim.model.positionWithin"]},{"name":"fun reproductionRule(aliveThreshold: Energy = 1.0, reproductionThreshold: Energy = 2.0): ReproductionStrategy","description":"io.github.evasim.model.reproductionRule","location":"evasim/io.github.evasim.model/reproduction-rule.html","searchKeys":["reproductionRule","fun reproductionRule(aliveThreshold: Energy = 1.0, reproductionThreshold: Energy = 2.0): ReproductionStrategy","io.github.evasim.model.reproductionRule"]},{"name":"fun reset()","description":"io.github.evasim.utils.Rnd.reset","location":"evasim/io.github.evasim.utils/-rnd/reset.html","searchKeys":["reset","fun reset()","io.github.evasim.utils.Rnd.reset"]},{"name":"fun resource(path: String, packageStructure: String = \"\"): URL","description":"io.github.evasim.utils.resource","location":"evasim/io.github.evasim.utils/resource.html","searchKeys":["resource","fun resource(path: String, packageStructure: String = \"\"): URL","io.github.evasim.utils.resource"]},{"name":"fun update(position: Position2D, direction: Direction? = null)","description":"io.github.evasim.model.Placed.update","location":"evasim/io.github.evasim.model/-placed/update.html","searchKeys":["update","fun update(position: Position2D, direction: Direction? = null)","io.github.evasim.model.Placed.update"]},{"name":"fun write(round: Round)","description":"io.github.evasim.utils.RoundLogger.write","location":"evasim/io.github.evasim.utils/-round-logger/write.html","searchKeys":["write","fun write(round: Round)","io.github.evasim.utils.RoundLogger.write"]},{"name":"infix fun <S : Shape> S.at(position: Position2D): Placed<S>","description":"io.github.evasim.model.at","location":"evasim/io.github.evasim.model/at.html","searchKeys":["at","infix fun <S : Shape> S.at(position: Position2D): Placed<S>","io.github.evasim.model.at"]},{"name":"infix fun Placed<out Shape>.collidesWith(other: Placed<out Shape>): Boolean","description":"io.github.evasim.model.collidesWith","location":"evasim/io.github.evasim.model/collides-with.html","searchKeys":["collidesWith","infix fun Placed<out Shape>.collidesWith(other: Placed<out Shape>): Boolean","io.github.evasim.model.collidesWith"]},{"name":"infix fun Placed<out Shape>.collidesWith(shape: Shape): Boolean","description":"io.github.evasim.model.collidesWith","location":"evasim/io.github.evasim.model/collides-with.html","searchKeys":["collidesWith","infix fun Placed<out Shape>.collidesWith(shape: Shape): Boolean","io.github.evasim.model.collidesWith"]},{"name":"interface Blob : Entity, EventPublisher","description":"io.github.evasim.model.Blob","location":"evasim/io.github.evasim.model/-blob/index.html","searchKeys":["Blob","interface Blob : Entity, EventPublisher","io.github.evasim.model.Blob"]},{"name":"interface Boundary","description":"io.github.evasim.controller.Boundary","location":"evasim/io.github.evasim.controller/-boundary/index.html","searchKeys":["Boundary","interface Boundary","io.github.evasim.controller.Boundary"]},{"name":"interface Controller : EventPublisher","description":"io.github.evasim.controller.Controller","location":"evasim/io.github.evasim.controller/-controller/index.html","searchKeys":["Controller","interface Controller : EventPublisher","io.github.evasim.controller.Controller"]},{"name":"interface Entity","description":"io.github.evasim.model.Entity","location":"evasim/io.github.evasim.model/-entity/index.html","searchKeys":["Entity","interface Entity","io.github.evasim.model.Entity"]},{"name":"interface EventPublisher","description":"io.github.evasim.model.EventPublisher","location":"evasim/io.github.evasim.model/-event-publisher/index.html","searchKeys":["EventPublisher","interface EventPublisher","io.github.evasim.model.EventPublisher"]},{"name":"interface EventSubscriber","description":"io.github.evasim.model.EventSubscriber","location":"evasim/io.github.evasim.model/-event-subscriber/index.html","searchKeys":["EventSubscriber","interface EventSubscriber","io.github.evasim.model.EventSubscriber"]},{"name":"interface Food : Entity, EventPublisher","description":"io.github.evasim.model.Food","location":"evasim/io.github.evasim.model/-food/index.html","searchKeys":["Food","interface Food : Entity, EventPublisher","io.github.evasim.model.Food"]},{"name":"interface Health","description":"io.github.evasim.model.Health","location":"evasim/io.github.evasim.model/-health/index.html","searchKeys":["Health","interface Health","io.github.evasim.model.Health"]},{"name":"interface Piece","description":"io.github.evasim.model.Food.Piece","location":"evasim/io.github.evasim.model/-food/-piece/index.html","searchKeys":["Piece","interface Piece","io.github.evasim.model.Food.Piece"]},{"name":"interface Position2D","description":"io.github.evasim.model.Position2D","location":"evasim/io.github.evasim.model/-position2-d/index.html","searchKeys":["Position2D","interface Position2D","io.github.evasim.model.Position2D"]},{"name":"interface Round","description":"io.github.evasim.model.Round","location":"evasim/io.github.evasim.model/-round/index.html","searchKeys":["Round","interface Round","io.github.evasim.model.Round"]},{"name":"interface Sight","description":"io.github.evasim.model.Sight","location":"evasim/io.github.evasim.model/-sight/index.html","searchKeys":["Sight","interface Sight","io.github.evasim.model.Sight"]},{"name":"interface SpawnZone","description":"io.github.evasim.model.SpawnZone","location":"evasim/io.github.evasim.model/-spawn-zone/index.html","searchKeys":["SpawnZone","interface SpawnZone","io.github.evasim.model.SpawnZone"]},{"name":"interface Vector2D","description":"io.github.evasim.model.Vector2D","location":"evasim/io.github.evasim.model/-vector2-d/index.html","searchKeys":["Vector2D","interface Vector2D","io.github.evasim.model.Vector2D"]},{"name":"interface Versor2D : Vector2D","description":"io.github.evasim.model.Versor2D","location":"evasim/io.github.evasim.model/-versor2-d/index.html","searchKeys":["Versor2D","interface Versor2D : Vector2D","io.github.evasim.model.Versor2D"]},{"name":"interface World : EventPublisher","description":"io.github.evasim.model.World","location":"evasim/io.github.evasim.model/-world/index.html","searchKeys":["World","interface World : EventPublisher","io.github.evasim.model.World"]},{"name":"object Alive : State","description":"io.github.evasim.model.State.Alive","location":"evasim/io.github.evasim.model/-state/-alive/index.html","searchKeys":["Alive","object Alive : State","io.github.evasim.model.State.Alive"]},{"name":"object Companion","description":"io.github.evasim.model.Blob.Companion","location":"evasim/io.github.evasim.model/-blob/-companion/index.html","searchKeys":["Companion","object Companion","io.github.evasim.model.Blob.Companion"]},{"name":"object Companion","description":"io.github.evasim.model.Food.Companion","location":"evasim/io.github.evasim.model/-food/-companion/index.html","searchKeys":["Companion","object Companion","io.github.evasim.model.Food.Companion"]},{"name":"object Companion","description":"io.github.evasim.model.Health.Companion","location":"evasim/io.github.evasim.model/-health/-companion/index.html","searchKeys":["Companion","object Companion","io.github.evasim.model.Health.Companion"]},{"name":"object Companion","description":"io.github.evasim.model.Position2D.Companion","location":"evasim/io.github.evasim.model/-position2-d/-companion/index.html","searchKeys":["Companion","object Companion","io.github.evasim.model.Position2D.Companion"]},{"name":"object Companion","description":"io.github.evasim.model.Round.Companion","location":"evasim/io.github.evasim.model/-round/-companion/index.html","searchKeys":["Companion","object Companion","io.github.evasim.model.Round.Companion"]},{"name":"object Companion","description":"io.github.evasim.model.Sight.Companion","location":"evasim/io.github.evasim.model/-sight/-companion/index.html","searchKeys":["Companion","object Companion","io.github.evasim.model.Sight.Companion"]},{"name":"object Companion","description":"io.github.evasim.model.SpawnZone.Companion","location":"evasim/io.github.evasim.model/-spawn-zone/-companion/index.html","searchKeys":["Companion","object Companion","io.github.evasim.model.SpawnZone.Companion"]},{"name":"object Companion","description":"io.github.evasim.model.Vector2D.Companion","location":"evasim/io.github.evasim.model/-vector2-d/-companion/index.html","searchKeys":["Companion","object Companion","io.github.evasim.model.Vector2D.Companion"]},{"name":"object Companion","description":"io.github.evasim.model.Versor2D.Companion","location":"evasim/io.github.evasim.model/-versor2-d/-companion/index.html","searchKeys":["Companion","object Companion","io.github.evasim.model.Versor2D.Companion"]},{"name":"object Companion","description":"io.github.evasim.model.World.Companion","location":"evasim/io.github.evasim.model/-world/-companion/index.html","searchKeys":["Companion","object Companion","io.github.evasim.model.World.Companion"]},{"name":"object Companion","description":"io.github.evasim.utils.RandomConfig.Companion","location":"evasim/io.github.evasim.utils/-random-config/-companion/index.html","searchKeys":["Companion","object Companion","io.github.evasim.utils.RandomConfig.Companion"]},{"name":"object Dead : State","description":"io.github.evasim.model.State.Dead","location":"evasim/io.github.evasim.model/-state/-dead/index.html","searchKeys":["Dead","object Dead : State","io.github.evasim.model.State.Dead"]},{"name":"object EvaSimApp","description":"io.github.evasim.EvaSimApp","location":"evasim/io.github.evasim/-eva-sim-app/index.html","searchKeys":["EvaSimApp","object EvaSimApp","io.github.evasim.EvaSimApp"]},{"name":"object Logic","description":"io.github.evasim.utils.Logic","location":"evasim/io.github.evasim.utils/-logic/index.html","searchKeys":["Logic","object Logic","io.github.evasim.utils.Logic"]},{"name":"object OwnName","description":"io.github.evasim.utils.OwnName","location":"evasim/io.github.evasim.utils/-own-name/index.html","searchKeys":["OwnName","object OwnName","io.github.evasim.utils.OwnName"]},{"name":"object Reproducing : State","description":"io.github.evasim.model.State.Reproducing","location":"evasim/io.github.evasim.model/-state/-reproducing/index.html","searchKeys":["Reproducing","object Reproducing : State","io.github.evasim.model.State.Reproducing"]},{"name":"object Rnd","description":"io.github.evasim.utils.Rnd","location":"evasim/io.github.evasim.utils/-rnd/index.html","searchKeys":["Rnd","object Rnd","io.github.evasim.utils.Rnd"]},{"name":"object SimulatorController : EventBusPublisher, Controller","description":"io.github.evasim.controller.SimulatorController","location":"evasim/io.github.evasim.controller/-simulator-controller/index.html","searchKeys":["SimulatorController","object SimulatorController : EventBusPublisher, Controller","io.github.evasim.controller.SimulatorController"]},{"name":"open class EventBusPublisher : EventPublisher","description":"io.github.evasim.model.EventBusPublisher","location":"evasim/io.github.evasim.model/-event-bus-publisher/index.html","searchKeys":["EventBusPublisher","open class EventBusPublisher : EventPublisher","io.github.evasim.model.EventBusPublisher"]},{"name":"open fun hasUncollectedPieces(): Boolean","description":"io.github.evasim.model.Food.hasUncollectedPieces","location":"evasim/io.github.evasim.model/-food/has-uncollected-pieces.html","searchKeys":["hasUncollectedPieces","open fun hasUncollectedPieces(): Boolean","io.github.evasim.model.Food.hasUncollectedPieces"]},{"name":"open infix fun collidingWith(other: Entity): Boolean","description":"io.github.evasim.model.Entity.collidingWith","location":"evasim/io.github.evasim.model/-entity/colliding-with.html","searchKeys":["collidingWith","open infix fun collidingWith(other: Entity): Boolean","io.github.evasim.model.Entity.collidingWith"]},{"name":"open operator fun component1(): Double","description":"io.github.evasim.model.Position2D.component1","location":"evasim/io.github.evasim.model/-position2-d/component1.html","searchKeys":["component1","open operator fun component1(): Double","io.github.evasim.model.Position2D.component1"]},{"name":"open operator fun component1(): Double","description":"io.github.evasim.model.Vector2D.component1","location":"evasim/io.github.evasim.model/-vector2-d/component1.html","searchKeys":["component1","open operator fun component1(): Double","io.github.evasim.model.Vector2D.component1"]},{"name":"open operator fun component2(): Double","description":"io.github.evasim.model.Position2D.component2","location":"evasim/io.github.evasim.model/-position2-d/component2.html","searchKeys":["component2","open operator fun component2(): Double","io.github.evasim.model.Position2D.component2"]},{"name":"open operator fun component2(): Double","description":"io.github.evasim.model.Vector2D.component2","location":"evasim/io.github.evasim.model/-vector2-d/component2.html","searchKeys":["component2","open operator fun component2(): Double","io.github.evasim.model.Vector2D.component2"]},{"name":"open override fun copy(agentIDs: Map<String, AgentID>, externalActions: Map<String, ExternalAction>, messageBoxes: Map<AgentID, MessageQueue>, perception: Perception, data: Map<String, Any>): Environment","description":"io.github.evasim.agents.SimulationEnvironment.copy","location":"evasim/io.github.evasim.agents/-simulation-environment/copy.html","searchKeys":["copy","open override fun copy(agentIDs: Map<String, AgentID>, externalActions: Map<String, ExternalAction>, messageBoxes: Map<AgentID, MessageQueue>, perception: Perception, data: Map<String, Any>): Environment","io.github.evasim.agents.SimulationEnvironment.copy"]},{"name":"open override fun launch()","description":"io.github.evasim.view.FXSimulatorView.launch","location":"evasim/io.github.evasim.view/-f-x-simulator-view/launch.html","searchKeys":["launch","open override fun launch()","io.github.evasim.view.FXSimulatorView.launch"]},{"name":"open override fun locallyContains(p2D: Position2D, direction: Direction?): Boolean","description":"io.github.evasim.model.Circle.locallyContains","location":"evasim/io.github.evasim.model/-circle/locally-contains.html","searchKeys":["locallyContains","open override fun locallyContains(p2D: Position2D, direction: Direction?): Boolean","io.github.evasim.model.Circle.locallyContains"]},{"name":"open override fun locallyContains(p2D: Position2D, direction: Direction?): Boolean","description":"io.github.evasim.model.Cone.locallyContains","location":"evasim/io.github.evasim.model/-cone/locally-contains.html","searchKeys":["locallyContains","open override fun locallyContains(p2D: Position2D, direction: Direction?): Boolean","io.github.evasim.model.Cone.locallyContains"]},{"name":"open override fun locallyContains(p2D: Position2D, direction: Direction?): Boolean","description":"io.github.evasim.model.HollowCircle.locallyContains","location":"evasim/io.github.evasim.model/-hollow-circle/locally-contains.html","searchKeys":["locallyContains","open override fun locallyContains(p2D: Position2D, direction: Direction?): Boolean","io.github.evasim.model.HollowCircle.locallyContains"]},{"name":"open override fun locallyContains(p2D: Position2D, direction: Direction?): Boolean","description":"io.github.evasim.model.Rectangle.locallyContains","location":"evasim/io.github.evasim.model/-rectangle/locally-contains.html","searchKeys":["locallyContains","open override fun locallyContains(p2D: Position2D, direction: Direction?): Boolean","io.github.evasim.model.Rectangle.locallyContains"]},{"name":"open override fun percept(agent: Agent): BeliefBase","description":"io.github.evasim.agents.SimulationEnvironment.percept","location":"evasim/io.github.evasim.agents/-simulation-environment/percept.html","searchKeys":["percept","open override fun percept(agent: Agent): BeliefBase","io.github.evasim.agents.SimulationEnvironment.percept"]},{"name":"open override fun post(event: Event)","description":"io.github.evasim.model.EventBusPublisher.post","location":"evasim/io.github.evasim.model/-event-bus-publisher/post.html","searchKeys":["post","open override fun post(event: Event)","io.github.evasim.model.EventBusPublisher.post"]},{"name":"open override fun register(subscriber: EventSubscriber): Boolean","description":"io.github.evasim.model.EventBusPublisher.register","location":"evasim/io.github.evasim.model/-event-bus-publisher/register.html","searchKeys":["register","open override fun register(subscriber: EventSubscriber): Boolean","io.github.evasim.model.EventBusPublisher.register"]},{"name":"open override fun render(element: T, context: Unit): R","description":"io.github.evasim.view.Renderable.render","location":"evasim/io.github.evasim.view/-renderable/render.html","searchKeys":["render","open override fun render(element: T, context: Unit): R","io.github.evasim.view.Renderable.render"]},{"name":"open override fun scale(factor: Double): Shape","description":"io.github.evasim.model.Circle.scale","location":"evasim/io.github.evasim.model/-circle/scale.html","searchKeys":["scale","open override fun scale(factor: Double): Shape","io.github.evasim.model.Circle.scale"]},{"name":"open override fun scale(factor: Double): Shape","description":"io.github.evasim.model.Cone.scale","location":"evasim/io.github.evasim.model/-cone/scale.html","searchKeys":["scale","open override fun scale(factor: Double): Shape","io.github.evasim.model.Cone.scale"]},{"name":"open override fun scale(factor: Double): Shape","description":"io.github.evasim.model.HollowCircle.scale","location":"evasim/io.github.evasim.model/-hollow-circle/scale.html","searchKeys":["scale","open override fun scale(factor: Double): Shape","io.github.evasim.model.HollowCircle.scale"]},{"name":"open override fun scale(factor: Double): Shape","description":"io.github.evasim.model.Rectangle.scale","location":"evasim/io.github.evasim.model/-rectangle/scale.html","searchKeys":["scale","open override fun scale(factor: Double): Shape","io.github.evasim.model.Rectangle.scale"]},{"name":"open override fun start(primaryStage: Stage)","description":"io.github.evasim.view.FXSimulatorView.start","location":"evasim/io.github.evasim.view/-f-x-simulator-view/start.html","searchKeys":["start","open override fun start(primaryStage: Stage)","io.github.evasim.view.FXSimulatorView.start"]},{"name":"open override fun start(worldConfiguration: World.Companion.Configuration, roundTimeout: Duration, runSeed: Long)","description":"io.github.evasim.controller.SimulatorController.start","location":"evasim/io.github.evasim.controller/-simulator-controller/start.html","searchKeys":["start","open override fun start(worldConfiguration: World.Companion.Configuration, roundTimeout: Duration, runSeed: Long)","io.github.evasim.controller.SimulatorController.start"]},{"name":"open override fun stop()","description":"io.github.evasim.controller.SimulatorController.stop","location":"evasim/io.github.evasim.controller/-simulator-controller/stop.html","searchKeys":["stop","open override fun stop()","io.github.evasim.controller.SimulatorController.stop"]},{"name":"open override fun toString(): String","description":"io.github.evasim.model.Degrees.toString","location":"evasim/io.github.evasim.model/-degrees/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.evasim.model.Degrees.toString"]},{"name":"open override fun toString(): String","description":"io.github.evasim.model.Radians.toString","location":"evasim/io.github.evasim.model/-radians/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.evasim.model.Radians.toString"]},{"name":"open override fun unregister(subscriber: EventSubscriber): Boolean","description":"io.github.evasim.model.EventBusPublisher.unregister","location":"evasim/io.github.evasim.model/-event-bus-publisher/unregister.html","searchKeys":["unregister","open override fun unregister(subscriber: EventSubscriber): Boolean","io.github.evasim.model.EventBusPublisher.unregister"]},{"name":"open override fun updateData(newData: Map<String, Any>): Environment","description":"io.github.evasim.agents.SimulationEnvironment.updateData","location":"evasim/io.github.evasim.agents/-simulation-environment/update-data.html","searchKeys":["updateData","open override fun updateData(newData: Map<String, Any>): Environment","io.github.evasim.agents.SimulationEnvironment.updateData"]},{"name":"open val direction: Direction","description":"io.github.evasim.model.Blob.direction","location":"evasim/io.github.evasim.model/-blob/direction.html","searchKeys":["direction","open val direction: Direction","io.github.evasim.model.Blob.direction"]},{"name":"open val place: Placed<Shape>","description":"io.github.evasim.model.Entity.place","location":"evasim/io.github.evasim.model/-entity/place.html","searchKeys":["place","open val place: Placed<Shape>","io.github.evasim.model.Entity.place"]},{"name":"open val place: Placed<Shape>","description":"io.github.evasim.model.SpawnZone.place","location":"evasim/io.github.evasim.model/-spawn-zone/place.html","searchKeys":["place","open val place: Placed<Shape>","io.github.evasim.model.SpawnZone.place"]},{"name":"operator fun String.invoke(): Struct","description":"io.github.evasim.utils.Logic.invoke","location":"evasim/io.github.evasim.utils/-logic/invoke.html","searchKeys":["invoke","operator fun String.invoke(): Struct","io.github.evasim.utils.Logic.invoke"]},{"name":"operator fun String.invoke(p: Position2D): Struct","description":"io.github.evasim.utils.Logic.invoke","location":"evasim/io.github.evasim.utils/-logic/invoke.html","searchKeys":["invoke","operator fun String.invoke(p: Position2D): Struct","io.github.evasim.utils.Logic.invoke"]},{"name":"operator fun String.invoke(s: String): Struct","description":"io.github.evasim.utils.Logic.invoke","location":"evasim/io.github.evasim.utils/-logic/invoke.html","searchKeys":["invoke","operator fun String.invoke(s: String): Struct","io.github.evasim.utils.Logic.invoke"]},{"name":"operator fun String.invoke(v: Vector2D): Struct","description":"io.github.evasim.utils.Logic.invoke","location":"evasim/io.github.evasim.utils/-logic/invoke.html","searchKeys":["invoke","operator fun String.invoke(v: Vector2D): Struct","io.github.evasim.utils.Logic.invoke"]},{"name":"operator fun contains(point: Position2D): Boolean","description":"io.github.evasim.model.Placed.contains","location":"evasim/io.github.evasim.model/-placed/contains.html","searchKeys":["contains","operator fun contains(point: Position2D): Boolean","io.github.evasim.model.Placed.contains"]},{"name":"operator fun getValue(thisRef: Any?, property: KProperty<*>): String","description":"io.github.evasim.utils.OwnName.getValue","location":"evasim/io.github.evasim.utils/-own-name/get-value.html","searchKeys":["getValue","operator fun getValue(thisRef: Any?, property: KProperty<*>): String","io.github.evasim.utils.OwnName.getValue"]},{"name":"operator fun invoke(id: Entity.Id, personality: Personality, position: Position2D, shape: Shape = Circle(radius = 20.0), velocity: Vector2D = Vector2D.ZERO, defaultDirection: Direction = Direction.DOWN, sightShape: Shape = Cone(radius = 100.0, fovDegrees = Degrees(value = 90.0)), health: Health = Health(min = 0.0, max = 2.0), reproductionRule: ReproductionStrategy = reproductionRule()): Blob","description":"io.github.evasim.model.Blob.Companion.invoke","location":"evasim/io.github.evasim.model/-blob/-companion/invoke.html","searchKeys":["invoke","operator fun invoke(id: Entity.Id, personality: Personality, position: Position2D, shape: Shape = Circle(radius = 20.0), velocity: Vector2D = Vector2D.ZERO, defaultDirection: Direction = Direction.DOWN, sightShape: Shape = Cone(radius = 100.0, fovDegrees = Degrees(value = 90.0)), health: Health = Health(min = 0.0, max = 2.0), reproductionRule: ReproductionStrategy = reproductionRule()): Blob","io.github.evasim.model.Blob.Companion.invoke"]},{"name":"operator fun invoke(min: Energy, max: Energy): Health","description":"io.github.evasim.model.Health.Companion.invoke","location":"evasim/io.github.evasim.model/-health/-companion/invoke.html","searchKeys":["invoke","operator fun invoke(min: Energy, max: Energy): Health","io.github.evasim.model.Health.Companion.invoke"]},{"name":"operator fun invoke(shape: Shape, initialPosition: Position2D, direction: Direction): Sight","description":"io.github.evasim.model.Sight.Companion.invoke","location":"evasim/io.github.evasim.model/-sight/-companion/invoke.html","searchKeys":["invoke","operator fun invoke(shape: Shape, initialPosition: Position2D, direction: Direction): Sight","io.github.evasim.model.Sight.Companion.invoke"]},{"name":"operator fun invoke(shape: Shape, position: Position2D): SpawnZone","description":"io.github.evasim.model.SpawnZone.Companion.invoke","location":"evasim/io.github.evasim.model/-spawn-zone/-companion/invoke.html","searchKeys":["invoke","operator fun invoke(shape: Shape, position: Position2D): SpawnZone","io.github.evasim.model.SpawnZone.Companion.invoke"]},{"name":"operator fun invoke(x: Double, y: Double): Position2D","description":"io.github.evasim.model.Position2D.Companion.invoke","location":"evasim/io.github.evasim.model/-position2-d/-companion/invoke.html","searchKeys":["invoke","operator fun invoke(x: Double, y: Double): Position2D","io.github.evasim.model.Position2D.Companion.invoke"]},{"name":"operator fun invoke(x: Double, y: Double): Vector2D","description":"io.github.evasim.model.Vector2D.Companion.invoke","location":"evasim/io.github.evasim.model/-vector2-d/-companion/invoke.html","searchKeys":["invoke","operator fun invoke(x: Double, y: Double): Vector2D","io.github.evasim.model.Vector2D.Companion.invoke"]},{"name":"operator fun invoke(x: Double, y: Double): Versor2D","description":"io.github.evasim.model.Versor2D.Companion.invoke","location":"evasim/io.github.evasim.model/-versor2-d/-companion/invoke.html","searchKeys":["invoke","operator fun invoke(x: Double, y: Double): Versor2D","io.github.evasim.model.Versor2D.Companion.invoke"]},{"name":"sealed interface Event","description":"io.github.evasim.model.Event","location":"evasim/io.github.evasim.model/-event/index.html","searchKeys":["Event","sealed interface Event","io.github.evasim.model.Event"]},{"name":"sealed interface Personality","description":"io.github.evasim.model.Personality","location":"evasim/io.github.evasim.model/-personality/index.html","searchKeys":["Personality","sealed interface Personality","io.github.evasim.model.Personality"]},{"name":"sealed interface Shape","description":"io.github.evasim.model.Shape","location":"evasim/io.github.evasim.model/-shape/index.html","searchKeys":["Shape","sealed interface Shape","io.github.evasim.model.Shape"]},{"name":"sealed interface State","description":"io.github.evasim.model.State","location":"evasim/io.github.evasim.model/-state/index.html","searchKeys":["State","sealed interface State","io.github.evasim.model.State"]},{"name":"typealias Contenders = List<Blob>","description":"io.github.evasim.agents.Contenders","location":"evasim/io.github.evasim.agents/-contenders/index.html","searchKeys":["Contenders","typealias Contenders = List<Blob>","io.github.evasim.agents.Contenders"]},{"name":"typealias Direction = Versor2D","description":"io.github.evasim.model.Direction","location":"evasim/io.github.evasim.model/-direction/index.html","searchKeys":["Direction","typealias Direction = Versor2D","io.github.evasim.model.Direction"]},{"name":"typealias Energy = Double","description":"io.github.evasim.model.Energy","location":"evasim/io.github.evasim.model/-energy/index.html","searchKeys":["Energy","typealias Energy = Double","io.github.evasim.model.Energy"]},{"name":"val Any.logger: Logger","description":"io.github.evasim.utils.logger","location":"evasim/io.github.evasim.utils/logger.html","searchKeys":["logger","val Any.logger: Logger","io.github.evasim.utils.logger"]},{"name":"val DOWN: Versor2D","description":"io.github.evasim.model.Versor2D.Companion.DOWN","location":"evasim/io.github.evasim.model/-versor2-d/-companion/-d-o-w-n.html","searchKeys":["DOWN","val DOWN: Versor2D","io.github.evasim.model.Versor2D.Companion.DOWN"]},{"name":"val LEFT: Versor2D","description":"io.github.evasim.model.Versor2D.Companion.LEFT","location":"evasim/io.github.evasim.model/-versor2-d/-companion/-l-e-f-t.html","searchKeys":["LEFT","val LEFT: Versor2D","io.github.evasim.model.Versor2D.Companion.LEFT"]},{"name":"val RIGHT: Versor2D","description":"io.github.evasim.model.Versor2D.Companion.RIGHT","location":"evasim/io.github.evasim.model/-versor2-d/-companion/-r-i-g-h-t.html","searchKeys":["RIGHT","val RIGHT: Versor2D","io.github.evasim.model.Versor2D.Companion.RIGHT"]},{"name":"val UP: Versor2D","description":"io.github.evasim.model.Versor2D.Companion.UP","location":"evasim/io.github.evasim.model/-versor2-d/-companion/-u-p.html","searchKeys":["UP","val UP: Versor2D","io.github.evasim.model.Versor2D.Companion.UP"]},{"name":"val ZERO: Vector2D","description":"io.github.evasim.model.Vector2D.Companion.ZERO","location":"evasim/io.github.evasim.model/-vector2-d/-companion/-z-e-r-o.html","searchKeys":["ZERO","val ZERO: Vector2D","io.github.evasim.model.Vector2D.Companion.ZERO"]},{"name":"val blob: Blob","description":"io.github.evasim.model.UpdatedBlob.blob","location":"evasim/io.github.evasim.model/-updated-blob/blob.html","searchKeys":["blob","val blob: Blob","io.github.evasim.model.UpdatedBlob.blob"]},{"name":"val contentionRule: ContentionRule","description":"io.github.evasim.model.contentionRule","location":"evasim/io.github.evasim.model/contention-rule.html","searchKeys":["contentionRule","val contentionRule: ContentionRule","io.github.evasim.model.contentionRule"]},{"name":"val doveBlobs: Int","description":"io.github.evasim.model.World.Companion.Configuration.doveBlobs","location":"evasim/io.github.evasim.model/-world/-companion/-configuration/dove-blobs.html","searchKeys":["doveBlobs","val doveBlobs: Int","io.github.evasim.model.World.Companion.Configuration.doveBlobs"]},{"name":"val food: Food","description":"io.github.evasim.model.RemoveFood.food","location":"evasim/io.github.evasim.model/-remove-food/food.html","searchKeys":["food","val food: Food","io.github.evasim.model.RemoveFood.food"]},{"name":"val food: Food","description":"io.github.evasim.model.UpdatedFood.food","location":"evasim/io.github.evasim.model/-updated-food/food.html","searchKeys":["food","val food: Food","io.github.evasim.model.UpdatedFood.food"]},{"name":"val foodsAmount: Int","description":"io.github.evasim.model.World.Companion.Configuration.foodsAmount","location":"evasim/io.github.evasim.model/-world/-companion/-configuration/foods-amount.html","searchKeys":["foodsAmount","val foodsAmount: Int","io.github.evasim.model.World.Companion.Configuration.foodsAmount"]},{"name":"val fovDegrees: Degrees","description":"io.github.evasim.model.Cone.fovDegrees","location":"evasim/io.github.evasim.model/-cone/fov-degrees.html","searchKeys":["fovDegrees","val fovDegrees: Degrees","io.github.evasim.model.Cone.fovDegrees"]},{"name":"val halfHeight: Double","description":"io.github.evasim.model.Rectangle.halfHeight","location":"evasim/io.github.evasim.model/-rectangle/half-height.html","searchKeys":["halfHeight","val halfHeight: Double","io.github.evasim.model.Rectangle.halfHeight"]},{"name":"val halfWidth: Double","description":"io.github.evasim.model.Rectangle.halfWidth","location":"evasim/io.github.evasim.model/-rectangle/half-width.html","searchKeys":["halfWidth","val halfWidth: Double","io.github.evasim.model.Rectangle.halfWidth"]},{"name":"val hawkyBlobs: Int","description":"io.github.evasim.model.World.Companion.Configuration.hawkyBlobs","location":"evasim/io.github.evasim.model/-world/-companion/-configuration/hawky-blobs.html","searchKeys":["hawkyBlobs","val hawkyBlobs: Int","io.github.evasim.model.World.Companion.Configuration.hawkyBlobs"]},{"name":"val height: Double","description":"io.github.evasim.model.Rectangle.height","location":"evasim/io.github.evasim.model/-rectangle/height.html","searchKeys":["height","val height: Double","io.github.evasim.model.Rectangle.height"]},{"name":"val innerRadius: Double","description":"io.github.evasim.model.HollowCircle.innerRadius","location":"evasim/io.github.evasim.model/-hollow-circle/inner-radius.html","searchKeys":["innerRadius","val innerRadius: Double","io.github.evasim.model.HollowCircle.innerRadius"]},{"name":"val origin: Position2D","description":"io.github.evasim.model.origin","location":"evasim/io.github.evasim.model/origin.html","searchKeys":["origin","val origin: Position2D","io.github.evasim.model.origin"]},{"name":"val outerRadius: Double","description":"io.github.evasim.model.HollowCircle.outerRadius","location":"evasim/io.github.evasim.model/-hollow-circle/outer-radius.html","searchKeys":["outerRadius","val outerRadius: Double","io.github.evasim.model.HollowCircle.outerRadius"]},{"name":"val radius: Double","description":"io.github.evasim.model.Circle.radius","location":"evasim/io.github.evasim.model/-circle/radius.html","searchKeys":["radius","val radius: Double","io.github.evasim.model.Circle.radius"]},{"name":"val radius: Double","description":"io.github.evasim.model.Cone.radius","location":"evasim/io.github.evasim.model/-cone/radius.html","searchKeys":["radius","val radius: Double","io.github.evasim.model.Cone.radius"]},{"name":"val rnd: Random","description":"io.github.evasim.utils.RandomConfig.rnd","location":"evasim/io.github.evasim.utils/-random-config/rnd.html","searchKeys":["rnd","val rnd: Random","io.github.evasim.utils.RandomConfig.rnd"]},{"name":"val shape: S","description":"io.github.evasim.model.Placed.shape","location":"evasim/io.github.evasim.model/-placed/shape.html","searchKeys":["shape","val shape: S","io.github.evasim.model.Placed.shape"]},{"name":"val shape: Shape","description":"io.github.evasim.model.World.Companion.Configuration.shape","location":"evasim/io.github.evasim.model/-world/-companion/-configuration/shape.html","searchKeys":["shape","val shape: Shape","io.github.evasim.model.World.Companion.Configuration.shape"]},{"name":"val spawnZones: Set<SpawnZone>","description":"io.github.evasim.model.World.Companion.Configuration.spawnZones","location":"evasim/io.github.evasim.model/-world/-companion/-configuration/spawn-zones.html","searchKeys":["spawnZones","val spawnZones: Set<SpawnZone>","io.github.evasim.model.World.Companion.Configuration.spawnZones"]},{"name":"val value: Double","description":"io.github.evasim.model.Degrees.value","location":"evasim/io.github.evasim.model/-degrees/value.html","searchKeys":["value","val value: Double","io.github.evasim.model.Degrees.value"]},{"name":"val value: Double","description":"io.github.evasim.model.Radians.value","location":"evasim/io.github.evasim.model/-radians/value.html","searchKeys":["value","val value: Double","io.github.evasim.model.Radians.value"]},{"name":"val value: String","description":"io.github.evasim.model.Entity.Id.value","location":"evasim/io.github.evasim.model/-entity/-id/value.html","searchKeys":["value","val value: String","io.github.evasim.model.Entity.Id.value"]},{"name":"val width: Double","description":"io.github.evasim.model.Rectangle.width","location":"evasim/io.github.evasim.model/-rectangle/width.html","searchKeys":["width","val width: Double","io.github.evasim.model.Rectangle.width"]},{"name":"val world: World","description":"io.github.evasim.model.UpdatedWorld.world","location":"evasim/io.github.evasim.model/-updated-world/world.html","searchKeys":["world","val world: World","io.github.evasim.model.UpdatedWorld.world"]},{"name":"val zero: Vector2D","description":"io.github.evasim.model.zero","location":"evasim/io.github.evasim.model/zero.html","searchKeys":["zero","val zero: Vector2D","io.github.evasim.model.zero"]},{"name":"value class Degrees(val value: Double)","description":"io.github.evasim.model.Degrees","location":"evasim/io.github.evasim.model/-degrees/index.html","searchKeys":["Degrees","value class Degrees(val value: Double)","io.github.evasim.model.Degrees"]},{"name":"value class Id(val value: String)","description":"io.github.evasim.model.Entity.Id","location":"evasim/io.github.evasim.model/-entity/-id/index.html","searchKeys":["Id","value class Id(val value: String)","io.github.evasim.model.Entity.Id"]},{"name":"value class Radians(val value: Double)","description":"io.github.evasim.model.Radians","location":"evasim/io.github.evasim.model/-radians/index.html","searchKeys":["Radians","value class Radians(val value: Double)","io.github.evasim.model.Radians"]},{"name":"var direction: Direction?","description":"io.github.evasim.model.Placed.direction","location":"evasim/io.github.evasim.model/-placed/direction.html","searchKeys":["direction","var direction: Direction?","io.github.evasim.model.Placed.direction"]},{"name":"var position: Position2D","description":"io.github.evasim.model.Placed.position","location":"evasim/io.github.evasim.model/-placed/position.html","searchKeys":["position","var position: Position2D","io.github.evasim.model.Placed.position"]}]